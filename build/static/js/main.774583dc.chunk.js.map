{"version":3,"sources":["Card.js","SearchBox.js","CardList.js","reportWebVitals.js","App.js","index.js"],"names":["Card","props","name","email","id","className","src","SearchBox","searchChange","type","placeholder","onChange","CardList","robots","cardsArray","map","user","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","onSearchChange","event","setState","searchField","target","value","state","fetch","response","json","users","filteredStu","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAsBgBA,EAnBF,SAACC,GACd,IAAQC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAGjB,OAEG,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAG,+BAA4BF,EAA5B,cACR,gCACC,mCAAMF,EAAN,OACA,kCAAKC,EAAL,cCWOI,EArBG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAKnB,OAEE,qBAAKH,UAAY,MAAjB,SAEC,uBACAA,UAAY,mCACZI,KAAO,SACPC,YAAc,kBACdC,SAAYH,OCQDI,EApBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEXC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAEnC,OAAO,cAAC,EAAD,CAAgBb,GAAMS,EAAOI,GAAGb,GAAIF,KAAQW,EAAOI,GAAGf,KAAMC,MAASU,EAAOI,GAAGd,OAAlEc,MAKrB,OAEG,8BAEEH,KCLQI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BC2DCQ,G,wDAzDd,aAAc,IAAD,8BACX,gBAYFC,eAAiB,SAACC,GAEf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CAEZrB,OAAS,GACTkB,YAAc,IALJ,E,qDAuBb,WAAoB,IAAD,OAElBI,MAAM,6CAA6Cd,MAAK,SAAAe,GAAQ,OAAIA,EAASC,UAAQhB,MAAK,SAAAiB,GAAK,OAAI,EAAKR,SAAS,CAACjB,OAAOyB,S,oBAK1H,WAAS,IAAD,OAEDC,EAAcC,KAAKN,MAAMrB,OAAO4B,QAAO,SAAA5B,GAG5C,OAAOA,EAAOX,KAAKwC,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAGlE,OACC,sBAAKrC,UAAY,KAAjB,UAEA,kDACA,cAAC,EAAD,CAAWG,aAAgBgC,KAAKZ,iBAChC,cAAC,EAAD,CAAUf,OAAU0B,W,GA7CLK,cCIlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACG,cAAC,EAAD,QAILC,SAASC,eAAe,SAM1B/B,M","file":"static/js/main.774583dc.chunk.js","sourcesContent":["\timport React from 'react';\r\n\timport 'tachyons';\r\n\r\n\tconst Card = (props)=>{\r\n\tconst  {name,email,id} = props;\r\n\r\n\r\n\t\t\treturn (\r\n\r\n\t\t\t\t\t\t<div className=\"tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\r\n\t\t\t\t\t\t\t<img src = {`https://robohash.org/${id}?200*200`} />\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t\t\t\t\t<p> {email} </p>\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t);\r\n\r\n\t}\r\n\r\n\texport default Card;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\r\n\t\t\t<div className = \"pa2\">\r\n\r\n\t\t\t\t<input \r\n\t\t\t\tclassName = \"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\t\ttype = \"search\" \r\n\t\t\t\tplaceholder = \"Search Students\"\r\n\t\t\t\tonChange = {searchChange}/>\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;"," import React from 'react';\r\nimport 'tachyons';\r\nimport Card from './Card';\r\nimport SearchBox from './SearchBox';\r\nconst CardList = ({robots})=>{\r\n\r\n\t\tconst cardsArray = robots.map((user,i)=>{\r\n\r\n\t\t\treturn <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\r\n\t\t});\r\n\r\n\r\n\r\n\t\treturn (\r\n\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{cardsArray}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t);\r\n\r\n}\r\n\r\nexport default CardList;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React , {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {robots} from './Robot';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component{\r\n\r\n\tconstructor(){\r\n\t\t\tsuper();\r\n\t\t\tthis.state = {\r\n\r\n\t\t\t\trobots : [],\r\n\t\t\t\tsearchField : ''\r\n\t\t\t}\r\n\r\n\r\n\t\t\t\r\n\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\r\n\t\t\t\tthis.setState({searchField:event.target.value});\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t// componentDidMount(){\r\n\t// \tfetch('http://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({robots:users}))\r\n\t// }\r\n\r\n\tcomponentDidMount(){\r\n\t\r\n\t\tfetch('http://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({robots:users}))\r\n\t\t\r\n\t}\r\n\r\n\r\n\trender(){\r\n\r\n\t\tconst filteredStu = this.state.robots.filter(robots =>{\r\n\r\n\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className = \"tc\">\r\n\r\n\t\t\t<h1>NerdEra Students</h1>\r\n\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t<CardList robots = {filteredStu}/>\r\n\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport CardList from './CardList';\nimport reportWebVitals from './reportWebVitals';\nimport {robots} from './Robot';\nimport SearchBox from './SearchBox';\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n       <App/>\n    </div>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}